version: "3.8"
services:
  zk1:
    # 주키퍼 사용
    image: zookeeper
    # 컨테이너명
    container_name: zk1
    hostname: zk1
    #    platform: linux/amd64
    restart: always
    ports: # 외부 : 내부
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1 # 고유하게
      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk.2:2888:3888;2181 server.3=zk3:2888:3888;2181 # server.id=<address1>:<port1>:<port2>[:role];[<client port address>:]<client port>
    volumes:
      - ~/zk-cluster/zk1/data:/data
      - ~/zk-cluster/zk1/logs:/logs
      - ~/zk-cluster/zk1/datalog:/datalog
  zk2:
    # 주키퍼 사용
    image: zookeeper
    # 컨테이너명
    container_name: zk2
    hostname: zk2
    #    platform: linux/amd64
    restart: always
    ports: # 외부 : 내부
      - "2182:2181"
    environment:
      ZOO_MY_ID: 2 # 고유하게
      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk2:2888:3888;2181 server.3=zk3:2888:3888;2181 # server.id=<address1>:<port1>:<port2>[:role];[<client port address>:]<client port>
    volumes:
      - ~/zk-cluster/zk2/data:/data
      - ~/zk-cluster/zk2/logs:/logs
      - ~/zk-cluster/zk2/datalog:/datalog
  zk3:
    # 주키퍼 사용
    image: zookeeper
    # 컨테이너명
    container_name: zk3
    hostname: zk3
    #    platform: linux/amd64
    restart: always
    ports: # 외부 : 내부
      - "2183:2181"
    environment:
      ZOO_MY_ID: 3 # 고유하게
      ZOO_SERVERS: server.1=zk1:2888:3888;2181 server.2=zk.2:2888:3888;2181 server.3=zk3:2888:3888;2181 # server.id=<address1>:<port1>:<port2>[:role];[<client port address>:]<client port>
    volumes:
      - ~/zk-cluster/zk3/data:/data
      - ~/zk-cluster/zk3/logs:/logs
      - ~/zk-cluster/zk3/datalog:/datalog


  zoo-navi:
    container_name: zoo-navi
    image: elkozmon/zoonavigator
    platform: linux/amd64
    ports:
      - "9000:9000"
    environment:
      HTTP_PORT: 9000
  #    command: bash bin/zkServer.sh start /opt/zookeeper-

  kafka1:
    image: confluentinc/cp-kafka
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9091:9091"
    restart: on-failure
    environment:
      TZ: Asia/Seoul
      #      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091 # 외부에서 접속을 위한 리스너애칭
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:19091,PLAINTEXT_HOST://localhost:9091 # 외부에서 접속을 위한 리스너애칭
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT # 보안을 위한 프로토콜 매핑
      #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT # 보안을 위한 프로토콜 매핑
      #      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL #도커 내부에서 사용할 리스너 이름
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zk1:2181,zk2:2181,zk3:2181 # zookeeper wjqthr dyd
      KAFKA_BROKER_ID: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
    volumes:
      - ~/data/kafka1/data:/tmp/kafka-logs
    # 의존관계 설정
    depends_on:
      - zk1
      - zk2
      - zk3
  kafka2:
    image: confluentinc/cp-kafka
    container_name: kafka2
    hostname: kafka2
    ports:
      - "9092:9092"
    restart: on-failure
    environment:
      TZ: Asia/Seoul
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:19092,PLAINTEXT_HOST://localhost:9092 # 외부에서 접속을 위한 리스너애칭
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      #      KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT # 추후에 변경
      #      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zk1:2181,zk2:2181,zk3:2181
      KAFKA_BROKER_ID: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
    volumes:
      - ~/data/kafka2/data:/tmp/kafka-logs
    # 의존관계 설정
    depends_on:
      - zk1
      - zk2
      - zk3
  kafka3:
    image: confluentinc/cp-kafka
    container_name: kafka3
    hostname: kafka3
    ports:
      - "9093:9093"
    restart: on-failure
    environment:
      TZ: Asia/Seoul
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:19093,PLAINTEXT_HOST://localhost:9093 # 외부에서 접속을 위한 리스너애칭
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka3:19093,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093
      #      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      #KAFKA_LISTENERS: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT # 추후에 변경
      #      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_HEAP_OPTS: -Xmx400m -Xms400m
      KAFKA_ZOOKEEPER_CONNECT: zk1:2181,zk2:2181,zk3:2181
      KAFKA_BROKER_ID: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      BOOTSTRAP_SERVERS: kafka1:19091,kafka2:19092,kafka3:19093
    volumes:
      - ~/data/kafka3/data:/tmp/kafka-logs
    # 의존관계 설정
    depends_on:
      - zk1
      - zk2
      - zk3
  kafdrop:
    image: obsidiandynamics/kafdrop
    platform: linux/amd64
    restart: no
    ports:
      - "9050:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka1:19091"
    depends_on:
      - kafka1
      - kafka2
      - kafka3



